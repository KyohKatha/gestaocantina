/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormPrincipal.java
 *
 * Created on 02/06/2010, 13:02:00
 */
package gestaocantina;

import Classes.ACP;
import Classes.DadosMes;
import Classes.Produto;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import jxl.*;
import jxl.read.biff.BiffException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.title.LegendTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;

/**
 *
 * @author Katha
 */
public class FormPrincipal extends javax.swing.JFrame {

    /** Creates new form FormPrincipal */
    public FormPrincipal() {
        initComponents();
        this.setSize(500, 500);
        acp = new ACP();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnAbrirPlanilha = new javax.swing.JButton();
        txtCaminho = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelDados = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableProduto = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        ltituloCurvaABC = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        lLegendaProdutos = new javax.swing.JLabel();
        lCurva = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cmbPolitica = new javax.swing.JComboBox();
        btnGerar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTabelaEstoque = new javax.swing.JTable();
        jPanelMRP = new javax.swing.JPanel();
        jComboBoxMRP = new javax.swing.JComboBox();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableMRP = new javax.swing.JTable();
        btnGerarMRP = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        btnAbrirPlanilha.setText("Abrir");
        btnAbrirPlanilha.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAbrirPlanilhaMouseClicked(evt);
            }
        });
        jPanel1.add(btnAbrirPlanilha, java.awt.BorderLayout.LINE_END);

        txtCaminho.setText("Gestao Cantina.xls");
        txtCaminho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCaminhoActionPerformed(evt);
            }
        });
        jPanel1.add(txtCaminho, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Arquivo:  ");
        jPanel1.add(jLabel1, java.awt.BorderLayout.LINE_START);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Gestão de Estoque");
        jPanel1.add(jLabel3, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jPanelDados.setLayout(new java.awt.BorderLayout());
        jPanelDados.add(jPanel2, java.awt.BorderLayout.PAGE_END);

        jPanel8.setLayout(new java.awt.BorderLayout());

        jTableProduto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Qtd Estoque", "Custo Unitário"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableProduto);

        jPanel8.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanelDados.add(jPanel8, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Dados", jPanelDados);

        jPanel3.setLayout(new java.awt.BorderLayout());

        ltituloCurvaABC.setText("Curva ABC");
        jPanel3.add(ltituloCurvaABC, java.awt.BorderLayout.PAGE_START);

        jPanel9.setLayout(new java.awt.GridLayout(1, 0));

        jPanel10.setLayout(new java.awt.BorderLayout());

        lLegendaProdutos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lLegendaProdutos.setText("Legenda");
        jPanel10.add(lLegendaProdutos, java.awt.BorderLayout.LINE_END);

        lCurva.setText("Aguarde: gráfico sendo carregado...");
        lCurva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel10.add(lCurva, java.awt.BorderLayout.CENTER);

        jPanel9.add(jPanel10);

        jPanel3.add(jPanel9, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Curva ABC", jPanel3);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel5.setLayout(new java.awt.BorderLayout());

        jLabel6.setText("Política:   ");
        jPanel5.add(jLabel6, java.awt.BorderLayout.LINE_START);

        cmbPolitica.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Lote Econômico de Pedidos", "Revisão Contínua", "Sistemas de Revisão Periódica" }));
        jPanel5.add(cmbPolitica, java.awt.BorderLayout.CENTER);

        btnGerar.setText("Gerar");
        btnGerar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGerarMouseClicked(evt);
            }
        });
        jPanel5.add(btnGerar, java.awt.BorderLayout.LINE_END);

        jPanel4.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jTabelaEstoque.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Custo Total do Sistema"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTabelaEstoque);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Políticas de Estoque", jPanel4);

        jComboBoxMRP.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Selecione produto", "Salgado", "Pizza", "Lanche Natural", "Achocolatado" }));

        jTableMRP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Informações", "Semanas", "Quarta-feira", "Quinta-feira", "Sexta-feira"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableMRP);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
        );

        btnGerarMRP.setText("Gerar");
        btnGerarMRP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGerarMRPMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanelMRPLayout = new javax.swing.GroupLayout(jPanelMRP);
        jPanelMRP.setLayout(jPanelMRPLayout);
        jPanelMRPLayout.setHorizontalGroup(
            jPanelMRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelMRPLayout.createSequentialGroup()
                .addComponent(jComboBoxMRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGerarMRP)
                .addGap(304, 304, 304))
        );
        jPanelMRPLayout.setVerticalGroup(
            jPanelMRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMRPLayout.createSequentialGroup()
                .addGroup(jPanelMRPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxMRP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGerarMRP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("MRP", jPanelMRP);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtCaminhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCaminhoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCaminhoActionPerformed

    private void btnAbrirPlanilhaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAbrirPlanilhaMouseClicked
        // TODO add your handling code here:
        String caminhoArquivo = txtCaminho.getText();
        if (!caminhoArquivo.equals("")) {
            ArrayList<Produto> produtos = carregarDados(caminhoArquivo);

            acp.setProdutos(produtos);
            jTableProduto.removeAll();

            
            DefaultTableModel dtm = (DefaultTableModel) jTableProduto.getModel();
            DecimalFormat format = new DecimalFormat();
            format.setMaximumFractionDigits(2);
            format.setMinimumFractionDigits(2);

            for (int i = 0; i < produtos.size(); i++) {
                Produto p = produtos.get(i);
                ArrayList<DadosMes> dados = p.getHistorico();
                double dCusto = dados.get(dados.size() - 1).getValorUnitCusto();

                dtm.addRow(new Object[]{p.getNome(), p.getQtdAtual(), format.format(dCusto)});
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Informe o caminho do arquivo !", nomeSistema, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAbrirPlanilhaMouseClicked

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        if (acp.getProdutos().isEmpty()) {
            ltituloCurvaABC.setText("Erro: Carregue o arquivo de dados!");
        } else {
            ltituloCurvaABC.setText("Curva ABC");
            lCurva.setText("Aguarde: gráfico sendo carregado...");
            acp.gerarABC();
            this.gerarGrafico();
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void btnGerarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGerarMouseClicked
        // TODO add your handling code here:
        switch (cmbPolitica.getSelectedIndex()) {
            case 0:
                acp.loteEconomicoPedidos();
                break;
            case 1:
                acp.revisaoContinua();
                break;
            case 2:
                acp.sistemasRevisaoPeriodica();
                break;
        }

        DefaultTableModel dtm = (DefaultTableModel) jTabelaEstoque.getModel();
        for(int i = jTabelaEstoque.getRowCount() - 1; i >= 0 ; i--){
            dtm.removeRow(i);
        }

        DecimalFormat format = new DecimalFormat();
        format.setMaximumFractionDigits(2);
        format.setMinimumFractionDigits(2);

        ArrayList<Produto> produtos = acp.getProdutos();

        for (int i = 0; i < produtos.size(); i++) {
            Produto p = produtos.get(i);
            double dCusto = p.getCustoSistema();

            dtm.addRow(new Object[]{p.getNome(), format.format(dCusto)});
        }
    }//GEN-LAST:event_btnGerarMouseClicked

    private void btnGerarMRPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGerarMRPMouseClicked
        // TODO add your handling code here:
        String sProduto = jComboBoxMRP.getSelectedItem().toString();

        if (!sProduto.equals("Selecione produto")) {
            String sCaminho = txtCaminho.getText();
            if (!sCaminho.equals("")) {
                ArrayList<Produto> produtos = carregarMRP(sCaminho, sProduto);

                //acp.setProdutos(produtos);
                jTableMRP.removeAll();

                DefaultTableModel dtm = (DefaultTableModel) jTableMRP.getModel();

                //Codigo para limpar a tabela antes de exibir
                for(int i = jTableMRP.getRowCount() - 1; i >= 0 ; i--){
                    dtm.removeRow(i);
                }
                /*
                DecimalFormat format = new DecimalFormat();
                format.setMaximumFractionDigits(2);
                format.setMinimumFractionDigits(2);
                 */

                for (int i = 0; i < produtos.size(); i++) {
                    Produto p = produtos.get(i);

                    System.out.println("NOME :: " + p.getNome());
                    //ArrayList<DadosMes> dados = p.getHistorico();
                    //double dCusto = dados.get(dados.size() - 1).getValorUnitCusto();
                    if (i == 0) {
                        dtm.addRow(new Object[]{"Código", p.getNome(), "Demanda", "", "", p.getiDemanda()});
                        dtm.addRow(new Object[]{"Tipo Lote", p.getsTipoLote(), "Recebimento previsto", "", "", p.getiRecPrevisto()});
                        dtm.addRow(new Object[]{"Lead Time", p.getsLeadTime(), "Estoque", "", "", p.getiEstoque()});
                        dtm.addRow(new Object[]{"Estoque segurança", p.getQtdSeguranca(), "Necessidades líquidas", "", "", p.getiNecLiquida()});
                        dtm.addRow(new Object[]{"Estoque inicial", p.getQtdAtual(), "Quantidade da OF ou OC", "", p.getiQtdOF_OC(), ""});
                        dtm.addRow(new Object[]{"", "", "", "", "", ""});
                    }else{
                        dtm.addRow(new Object[]{"Código", p.getNome(), "Demanda", "", p.getiDemanda(), ""});
                        dtm.addRow(new Object[]{"Tipo Lote", p.getsTipoLote(), "Recebimento previsto", "", p.getiRecPrevisto(), ""});
                        dtm.addRow(new Object[]{"Lead Time", p.getsLeadTime(), "Estoque", "", p.getiEstoque(),"" });
                        dtm.addRow(new Object[]{"Estoque segurança", p.getQtdSeguranca(), "Necessidades líquidas", "", p.getiNecLiquida(), ""});
                        dtm.addRow(new Object[]{"Estoque inicial", p.getQtdAtual(), "Quantidade da OF ou OC", p.getiQtdOF_OC(), "", ""});
                        dtm.addRow(new Object[]{"", "", "", "", "", ""});

                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Informe o caminho do arquivo !", nomeSistema, JOptionPane.WARNING_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(rootPane, "Selecione o produto a ser realizado MRP !", nomeSistema, JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnGerarMRPMouseClicked

    private void gerarGrafico() {
        ArrayList<Produto> produtos = acp.getProdutos();
        double acumulada = 0.0;
        double dI = 0.0;
        DefaultCategoryDataset defaultCategoryDataset = new DefaultCategoryDataset();
        char tipo;
        XYSeries series = new XYSeries("");
        for (int i = 0; i < produtos.size(); i++) {
            acumulada += produtos.get(i).getPorcentagem() * 100;
            dI += 1.0;
            series.add(acumulada, dI);
            if(produtos.get(i).getTipo() == 0)
                tipo = 'A';
            else if(produtos.get(i).getTipo() == 1)
                tipo = 'B';
            else
                tipo = 'C';
            defaultCategoryDataset.addValue((Number) acumulada, tipo, i);
            /*while(produtos.get(i).getTipo() == 0)
            i++;
            series.add(produtos.get(i).getPorcentagem()*100, 5.0);
            while(produtos.get(i).getTipo() == 1)
            i++;
            series.add(produtos.get(i).getPorcentagem()*100, 10.0);*/
        }
        XYDataset xyDataset = new XYSeriesCollection(series);

        //JFreeChart chart = ChartFactory.createXYAreaChart("Curva ABC", "Porcentagem", "Produto", xyDataset, PlotOrientation.HORIZONTAL, true, false, false);
        JFreeChart chart = ChartFactory.createAreaChart("Curva ABC", "Produto", "Porcentagem", defaultCategoryDataset, PlotOrientation.VERTICAL, true, true, true);
        //JFreeChart chart = ChartFactory.createLineChart("Curva ABC", "Produto", "Porcentagem", defaultCategoryDataset, PlotOrientation.VERTICAL, true, false, false);
        chart.setBackgroundPaint(Color.LIGHT_GRAY);
        chart.getTitle().setPaint(Color.BLACK);
        CategoryPlot p = chart.getCategoryPlot();
        p.setForegroundAlpha(0.4f);

        p.setRangeGridlinePaint(Color.red);
        CategoryItemRenderer renderer = p.getRenderer();
        /*for (int i = 0; i < produtos.size(); i++) {
            if(produtos.get(i).getTipo() == 0)
                renderer.setSeriesPaint(i, Color.ORANGE);
            else if(produtos.get(i).getTipo() == 1)
                renderer.setSeriesPaint(i, Color.BLUE);
            else
                renderer.setSeriesPaint(i, Color.GREEN);
        }*/
        renderer.setSeriesPaint(0, Color.ORANGE);
        renderer.setSeriesPaint(1, Color.BLUE);
        renderer.setSeriesPaint(2, Color.GREEN);
        BufferedImage image = chart.createBufferedImage(1000, 500);

        lCurva.setIcon(new ImageIcon(image));
        lCurva.setText("");
        lCurva.repaint();
        String textoLegenda = "<html>Produtos<br><br>";
        textoLegenda += "<table border=\"1\">";
        textoLegenda += "<tr><td>Numero</td><td>Nome</td><td>Numero</td><td>Nome</td></tr>";
        for (int i = 0; i < produtos.size()/2; i++) {
            textoLegenda += "<tr><td>" + i + "</td><td>" + produtos.get(i).getNome() + "</td><td>" + (i+13) + "</td><td>" + produtos.get(i+13).getNome() + "</td></tr>";
        }
        textoLegenda += "</table></html>";
        lLegendaProdutos.setText(textoLegenda);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new FormPrincipal().setVisible(true);
            }
        });
    }

    private ArrayList<Produto> carregarDados(String caminhoArquivo) {
        ArrayList<Produto> produtos = new ArrayList<Produto>();
        try {
            Workbook workbook = Workbook.getWorkbook(new File(caminhoArquivo));
            Sheet sheet = workbook.getSheet("CONTROLE");

            //Le número de linhas preenchidas na planilha
            Cell cell = sheet.getCell("IV1");
            String sNumLinhas = cell.getContents();
            int iNumLinhas = Integer.parseInt(sNumLinhas);

            //Le número de colunas preenchidas na planilha
            cell = sheet.getCell("IV2");
            String sNumColunas = cell.getContents();
            int iNumColunas = Integer.parseInt(sNumColunas);

            for (int lin = 2; lin < iNumLinhas; lin++) {
                int col2 = 0;
                int col;

                //Le nome do produto
                cell = sheet.getCell(col2, lin);
                Produto produto = new Produto();
                produto.setNome(cell.getContents());
                ArrayList<DadosMes> dadosmes = new ArrayList<DadosMes>();

                System.out.println("Produto " + produto.getNome());

                NumberCell ncell;

                for (col = col2 + 1; col < iNumColunas - 2; col++) {
                    DadosMes dados = new DadosMes();
                    //Le mês
                    cell = sheet.getCell(col, 0);
                    String sMes = cell.getContents();
                    dados.setMes(sMes);
                    System.out.print("    Mes " + dados.getMes());

                    //Le ano
                    ncell = (NumberCell) sheet.getCell(col + 1, 0);
                    dados.setAno((int) ncell.getValue());
                    System.out.println("    Ano " + dados.getAno());

                    //Le qtde comprada
                    ncell = (NumberCell) sheet.getCell(col, lin);
                    dados.setQtdCompra((int) ncell.getValue());
                    col++;
                    System.out.println("        Qtde Comp  " + dados.getQtdCompra());

                    //Le preço de custo
                    ncell = (NumberCell) sheet.getCell(col, lin);
                    dados.setValorUnitCusto(ncell.getValue());
                    col++;
                    System.out.println("        Custo Unit " + dados.getValorUnitCusto());

                    //Le qtde venda
                    ncell = (NumberCell) sheet.getCell(col, lin);
                    dados.setQtdVenda((int) ncell.getValue());
                    col++;
                    System.out.println("        Qtde Venda " + dados.getQtdVenda());

                    //Le preço de venda
                    ncell = (NumberCell) sheet.getCell(col, lin);
                    dados.setValorUnitVenda(ncell.getValue());
                    System.out.println("        Preco Unit " + dados.getValorUnitVenda());

                    produto.addHistorico(dados);
                }

                //Le qtde atual
                ncell = (NumberCell) sheet.getCell(col, lin);
                produto.setQtdAtual((int) ncell.getValue());
                col++;
                System.out.println("    Qtd " + produto.getQtdAtual());

                //Le estoque de seguranca
                ncell = (NumberCell) sheet.getCell(col, lin);
                produto.setQtdSeguranca((int) ncell.getValue());
                System.out.println("    Sec " + produto.getQtdSeguranca());

                produtos.add(produto);
            }

            workbook.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Erro ao ler " + caminhoArquivo, nomeSistema, JOptionPane.ERROR_MESSAGE);
        }

        System.out.println("fim");

        return produtos;
    }

    private ArrayList<Produto> carregarMRP(String caminhoArquivo, String sAProduto) {
        ArrayList<Produto> aProdutos = new ArrayList<Produto>();
        try {
            Workbook workbook = Workbook.getWorkbook(new File(caminhoArquivo));
            Sheet sheet = workbook.getSheet("MRP");


            if (sAProduto.equals("Salgado")) {

                for (int iLinha = 1; iLinha <= 73; iLinha = iLinha + 6) {
                    Produto objProduto = new Produto();

                    String sNome = sheet.getCell(1, iLinha).getContents();
                    String sTipoLote = sheet.getCell(1, iLinha + 1).getContents();
                    String sLeadTime = sheet.getCell(1, iLinha + 2).getContents();
                    String sQtdSeguranca = sheet.getCell(1, iLinha + 3).getContents();
                    String sQtdAtual = sheet.getCell(1, iLinha + 4).getContents();
                    String sDemanda;
                    int iQtdSeguranca = Integer.parseInt(sQtdSeguranca);
                    int iQtdAtual = Integer.parseInt(sQtdAtual);


                    objProduto.setNome(sNome);
                    objProduto.setsTipoLote(sTipoLote);
                    objProduto.setsLeadTime(sLeadTime);
                    objProduto.setQtdAtual(iQtdAtual);
                    objProduto.setQtdSeguranca(iQtdSeguranca);

                    if (iLinha == 1) {
                        sDemanda = sheet.getCell(5, iLinha).getContents();
                    } else {
                        sDemanda = sheet.getCell(4, iLinha).getContents();
                    }
                    int iDemanda = Integer.parseInt(sDemanda);
                    objProduto.setiDemanda(iDemanda);

                    objProduto.setiNecLiquida(acp.calcularNecessidadeLiquidaMRP(iDemanda, iQtdAtual, iQtdSeguranca));

                    if (objProduto.getsTipoLote().equals("LL")) {
                        objProduto.setiQtdOF_OC(objProduto.getiNecLiquida());
                        objProduto.setiRecPrevisto(objProduto.getiNecLiquida());
                    }

                    objProduto.setiEstoque(acp.calcularEstoqueAtualMRP(objProduto.getQtdAtual(), objProduto.getiRecPrevisto(), objProduto.getiDemanda()));

                    aProdutos.add(objProduto);

                }

            } else {
                if (sAProduto.equals("Pizza")) {

                    for (int iLinha = 80; iLinha <= 158; iLinha = iLinha + 6) {

                        Produto objProduto = new Produto();

                        String sNome = sheet.getCell(1, iLinha).getContents();
                        String sTipoLote = sheet.getCell(1, iLinha + 1).getContents();
                        String sLeadTime = sheet.getCell(1, iLinha + 2).getContents();
                        String sQtdSeguranca = sheet.getCell(1, iLinha + 3).getContents();
                        String sQtdAtual = sheet.getCell(1, iLinha + 4).getContents();
                        String sDemanda;
                        int iQtdSeguranca = Integer.parseInt(sQtdSeguranca);
                        int iQtdAtual = Integer.parseInt(sQtdAtual);


                        objProduto.setNome(sNome);
                        objProduto.setsTipoLote(sTipoLote);
                        objProduto.setsLeadTime(sLeadTime);
                        objProduto.setQtdAtual(iQtdAtual);
                        objProduto.setQtdSeguranca(iQtdSeguranca);

                        if (iLinha == 80) {
                            sDemanda = sheet.getCell(5, iLinha).getContents();
                        } else {
                            sDemanda = sheet.getCell(4, iLinha).getContents();
                        }
                        int iDemanda = Integer.parseInt(sDemanda);
                        objProduto.setiDemanda(iDemanda);

                        objProduto.setiNecLiquida(acp.calcularNecessidadeLiquidaMRP(iDemanda, iQtdAtual, iQtdSeguranca));

                        if (objProduto.getsTipoLote().equals("LL")) {
                            objProduto.setiQtdOF_OC(objProduto.getiNecLiquida());
                            objProduto.setiRecPrevisto(objProduto.getiNecLiquida());
                        }

                        objProduto.setiEstoque(acp.calcularEstoqueAtualMRP(objProduto.getQtdAtual(), objProduto.getiRecPrevisto(), objProduto.getiDemanda()));

                        aProdutos.add(objProduto);
                    }

                } else {
                    if (sAProduto.equals("Lanche Natural")) {

                        for (int iLinha = 165; iLinha <= 201; iLinha = iLinha + 6) {

                            Produto objProduto = new Produto();

                            String sNome = sheet.getCell(1, iLinha).getContents();
                            String sTipoLote = sheet.getCell(1, iLinha + 1).getContents();
                            String sLeadTime = sheet.getCell(1, iLinha + 2).getContents();
                            String sQtdSeguranca = sheet.getCell(1, iLinha + 3).getContents();
                            String sQtdAtual = sheet.getCell(1, iLinha + 4).getContents();
                            String sDemanda;
                            int iQtdSeguranca = Integer.parseInt(sQtdSeguranca);
                            int iQtdAtual = Integer.parseInt(sQtdAtual);


                            objProduto.setNome(sNome);
                            objProduto.setsTipoLote(sTipoLote);
                            objProduto.setsLeadTime(sLeadTime);
                            objProduto.setQtdAtual(iQtdAtual);
                            objProduto.setQtdSeguranca(iQtdSeguranca);

                            if (iLinha == 165) {
                                sDemanda = sheet.getCell(5, iLinha).getContents();
                            } else {
                                sDemanda = sheet.getCell(4, iLinha).getContents();
                            }
                            int iDemanda = Integer.parseInt(sDemanda);
                            objProduto.setiDemanda(iDemanda);

                            objProduto.setiNecLiquida(acp.calcularNecessidadeLiquidaMRP(iDemanda, iQtdAtual, iQtdSeguranca));

                            if (objProduto.getsTipoLote().equals("LL")) {
                                objProduto.setiQtdOF_OC(objProduto.getiNecLiquida());
                                objProduto.setiRecPrevisto(objProduto.getiNecLiquida());
                            }

                            objProduto.setiEstoque(acp.calcularEstoqueAtualMRP(objProduto.getQtdAtual(), objProduto.getiRecPrevisto(), objProduto.getiDemanda()));

                            aProdutos.add(objProduto);


                        }
                    }else{
                          if (sAProduto.equals("Achocolatado")) {

                        for (int iLinha = 208; iLinha <= 220; iLinha = iLinha + 6) {

                            Produto objProduto = new Produto();

                            String sNome = sheet.getCell(1, iLinha).getContents();
                            String sTipoLote = sheet.getCell(1, iLinha + 1).getContents();
                            String sLeadTime = sheet.getCell(1, iLinha + 2).getContents();
                            String sQtdSeguranca = sheet.getCell(1, iLinha + 3).getContents();
                            String sQtdAtual = sheet.getCell(1, iLinha + 4).getContents();
                            String sDemanda;
                            int iQtdSeguranca = Integer.parseInt(sQtdSeguranca);
                            int iQtdAtual = Integer.parseInt(sQtdAtual);


                            objProduto.setNome(sNome);
                            objProduto.setsTipoLote(sTipoLote);
                            objProduto.setsLeadTime(sLeadTime);
                            objProduto.setQtdAtual(iQtdAtual);
                            objProduto.setQtdSeguranca(iQtdSeguranca);

                            if (iLinha == 208) {
                                sDemanda = sheet.getCell(5, iLinha).getContents();
                            } else {
                                sDemanda = sheet.getCell(4, iLinha).getContents();
                            }
                            int iDemanda = Integer.parseInt(sDemanda);
                            objProduto.setiDemanda(iDemanda);

                            objProduto.setiNecLiquida(acp.calcularNecessidadeLiquidaMRP(iDemanda, iQtdAtual, iQtdSeguranca));

                            if (objProduto.getsTipoLote().equals("LL")) {
                                objProduto.setiQtdOF_OC(objProduto.getiNecLiquida());
                                objProduto.setiRecPrevisto(objProduto.getiNecLiquida());
                            }

                            objProduto.setiEstoque(acp.calcularEstoqueAtualMRP(objProduto.getQtdAtual(), objProduto.getiRecPrevisto(), objProduto.getiDemanda()));

                            aProdutos.add(objProduto);


                        }
                    }
                    }
                }
            }
            workbook.close();
        } catch (NumberFormatException nfe) {
            System.out.println("NumberFormatException: " + nfe.getMessage());
            //e.printStackTrace();
            //JOptionPane.showMessageDialog(rootPane, "Erro ao ler " + caminhoArquivo, nomeSistema, JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
        }

        System.out.println("fim de ler MRP");

        return aProdutos;
    }

    boolean isDigit(String s) {
        return s.matches("[1-100]");
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirPlanilha;
    private javax.swing.JButton btnGerar;
    private javax.swing.JButton btnGerarMRP;
    private javax.swing.JComboBox cmbPolitica;
    private javax.swing.JComboBox jComboBoxMRP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelDados;
    private javax.swing.JPanel jPanelMRP;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTabelaEstoque;
    private javax.swing.JTable jTableMRP;
    private javax.swing.JTable jTableProduto;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lCurva;
    private javax.swing.JLabel lLegendaProdutos;
    private javax.swing.JLabel ltituloCurvaABC;
    private javax.swing.JTextField txtCaminho;
    // End of variables declaration//GEN-END:variables
    private final String nomeSistema = "Gestão Cantina";
    private ACP acp;
}
